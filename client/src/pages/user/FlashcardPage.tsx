// ========================== IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ==========================
import React from "react";
import axios from "axios"; // D√πng ƒë·ªÉ g·ªçi API
import "./FlashCardPage.css";
import PaginationAntd from "../../components/common/Pagination"; // Component ph√¢n trang t√πy ch·ªânh
import Footer from "../../components/common/Footer"; // Component ch√¢n trang
import FlashCard from "../../components/UI/FlashCard"; // Component hi·ªÉn th·ªã th·∫ª flashcard
import Swal from "sweetalert2"; // Th∆∞ vi·ªán hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫πp m·∫Øt

// ========================== KHAI B√ÅO C√ÅC INTERFACE (KI·ªÇU D·ªÆ LI·ªÜU) ==========================

// ƒê·ªãnh nghƒ©a ki·ªÉu cho 1 t·ª´ v·ª±ng
interface Vocab {
  id: number;
  word: string;
  meaning: string;
  categoryId: number;
  topic: string;
  isLearned: boolean; // true n·∫øu t·ª´ ƒë√£ ƒë∆∞·ª£c h·ªçc
}

// ƒê·ªãnh nghƒ©a ki·ªÉu cho danh m·ª•c (category)
interface Category {
  id: number;
  name: string;
  topic: string;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu cho to√†n b·ªô state c·ªßa component
interface State {
  vocabs: Vocab[];              // Danh s√°ch t·ª´ v·ª±ng
  categories: Category[];       // Danh s√°ch danh m·ª•c
  currentIndex: number;         // V·ªã tr√≠ hi·ªán t·∫°i c·ªßa th·∫ª ƒëang h·ªçc
  filterCategoryId: number | "All"; // ID danh m·ª•c ƒëang ƒë∆∞·ª£c l·ªçc (ho·∫∑c "All")
  flipped: boolean;             // Tr·∫°ng th√°i l·∫≠t th·∫ª (true = hi·ªán nghƒ©a)
  loading: boolean;             // C·ªù ki·ªÉm tra ƒëang t·∫£i d·ªØ li·ªáu
  error: string | null;         // L∆∞u l·ªói (n·∫øu c√≥)
  currentPage: number;          // Trang hi·ªán t·∫°i c·ªßa b·∫£ng danh s√°ch
  pageSize: number;             // S·ªë ph·∫ßn t·ª≠ m·ªói trang
}

// ========================== KHAI B√ÅO CLASS COMPONENT ==========================
class FlashCardPage extends React.Component<{}, State> {
  // Kh·ªüi t·∫°o state m·∫∑c ƒë·ªãnh
  state: State = {
    vocabs: [],
    categories: [],
    currentIndex: 0,
    filterCategoryId: "All",
    flipped: false,
    loading: false,
    error: null,
    currentPage: 1,
    pageSize: 5,
  };

  // ========================== L·∫§Y D·ªÆ LI·ªÜU KHI COMPONENT MOUNT ==========================
  componentDidMount() {
    this.fetchData(); // G·ªçi API khi trang v·ª´a load
  }

  // H√†m g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch t·ª´ v·ª±ng v√† danh m·ª•c
  fetchData = async () => {
    this.setState({ loading: true }); // Hi·ªÉn th·ªã loading khi ƒëang t·∫£i
    try {
      // G·ªçi 2 API song song b·∫±ng Promise.all ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
      const [vocabsRes, categoriesRes] = await Promise.all([
        axios.get<Vocab[]>("http://localhost:8080/vocabs"),
        axios.get<Category[]>("http://localhost:8080/categories"),
      ]);
      // L∆∞u d·ªØ li·ªáu v√†o state
      this.setState({
        vocabs: vocabsRes.data,
        categories: categoriesRes.data,
        loading: false,
      });
    } catch (err: any) {
      // N·∫øu l·ªói -> hi·ªÉn th·ªã l·ªói v√† t·∫Øt loading
      this.setState({ error: err.message || "Failed to fetch data", loading: false });
    }
  };

  // ========================== C√ÅC H√ÄM X·ª¨ L√ù H√ÄNH ƒê·ªòNG ==========================

  // L·∫≠t th·∫ª flashcard (hi·ªán nghƒ©a ho·∫∑c t·ª´)
  handleFlip = () => {
    this.setState({ flipped: !this.state.flipped });
  };

  // Chuy·ªÉn sang t·ª´ k·∫ø ti·∫øp
  handleNext = () => {
    // L·ªçc ra c√°c t·ª´ CH∆ØA h·ªçc
    const filtered = this.getFilteredVocabs().filter(v => !v.isLearned);
    // N·∫øu ƒëang ·ªü cu·ªëi danh s√°ch
    if (this.state.currentIndex >= filtered.length - 1) {
      if (filtered.length > 0) {
        // C√≤n t·ª´ ch∆∞a h·ªçc -> nh·∫Øc nh·ªü
        Swal.fire({
          icon: "info",
          title: "B·∫°n v·∫´n ch∆∞a h·ªçc h·∫øt!",
          text: `B·∫°n c√≤n ${filtered.length} t·ª´ ch∆∞a h·ªçc. C·ªë g·∫Øng l·∫ßn sau nh√© üöÄ`,
        });
      } else {
        // T·∫•t c·∫£ ƒë√£ h·ªçc xong
        Swal.fire({
          title: "Ch√∫c m·ª´ng üéâ",
          text: "B·∫°n ƒë√£ h·ªçc xong to√†n b·ªô b√†i!",
          imageUrl: "https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif",
          imageWidth: 400,
          imageHeight: 200,
          imageAlt: "Celebration",
        });
      }
    } else {
      // N·∫øu ch∆∞a ƒë·∫øn cu·ªëi -> sang t·ª´ k·∫ø ti·∫øp
      this.setState(prev => ({
        currentIndex: Math.min(prev.currentIndex + 1, filtered.length - 1),
        flipped: false, // Reset l·∫°i tr·∫°ng th√°i th·∫ª (hi·ªán m·∫∑t tr∆∞·ªõc)
      }));
    }
  };

  // Quay l·∫°i t·ª´ tr∆∞·ªõc ƒë√≥
  handlePrevious = () => {
    if (this.state.currentIndex === 0) {
      Swal.fire({
        icon: "warning",
        title: "C·∫£nh b√°o",
        text: "B·∫°n ƒëang ·ªü t·ª´ ƒë·∫ßu ti√™n r·ªìi!",
      });
      return;
    }
    this.setState(prev => ({
      currentIndex: Math.max(prev.currentIndex - 1, 0),
      flipped: false,
    }));
  };

  // ƒê√°nh d·∫•u t·ª´ hi·ªán t·∫°i l√† "ƒë√£ h·ªçc"
  handleMarkLearned = () => {
    const filtered = this.getFilteredVocabs().filter(v => !v.isLearned);
    const current = filtered[this.state.currentIndex];

    if (current) {
      this.setState(prev => {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i isLearned = true cho t·ª´ hi·ªán t·∫°i
        const updatedVocabs = prev.vocabs.map(v =>
          v.id === current.id ? { ...v, isLearned: true } : v
        );

        // T√≠nh l·∫°i danh s√°ch ch∆∞a h·ªçc sau khi c·∫≠p nh·∫≠t
        const unlearned = updatedVocabs.filter(v =>
          !v.isLearned &&
          (prev.filterCategoryId === "All" || v.categoryId === prev.filterCategoryId)
        );

        // ƒê·∫∑t l·∫°i currentIndex h·ª£p l√Ω (n·∫øu c√≤n t·ª´ ch∆∞a h·ªçc)
        const newIndex = Math.min(prev.currentIndex, Math.max(unlearned.length - 1, 0));

        // N·∫øu h·ªçc h·∫øt to√†n b·ªô
        if (unlearned.length === 0) {
          Swal.fire({
            title: "Tuy·ªát v·ªùi üéá",
            text: "B·∫°n ƒë√£ h·ªçc h·∫øt t·∫•t c·∫£ t·ª´!",
            imageUrl: "https://media.giphy.com/media/111ebonMs90YLu/giphy.gif",
            imageWidth: 400,
            imageHeight: 200,
            imageAlt: "Fireworks",
          });
        }

        return {
          vocabs: updatedVocabs,
          currentIndex: newIndex,
        };
      });
    }
  };

  // Khi ng∆∞·ªùi d√πng ch·ªçn thay ƒë·ªïi danh m·ª•c
  handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value === "All" ? "All" : Number(e.target.value);
    // Reset index, trang, tr·∫°ng th√°i flip khi ƒë·ªïi danh m·ª•c
    this.setState({ filterCategoryId: value, currentIndex: 0, flipped: false, currentPage: 1 });
  };

  // ========================== H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU HI·ªÇN TH·ªä ==========================

  // L·∫•y danh s√°ch t·ª´ theo danh m·ª•c ƒë∆∞·ª£c ch·ªçn
  getFilteredVocabs = () => {
    const { vocabs, filterCategoryId } = this.state;
    if (filterCategoryId === "All") return vocabs;
    return vocabs.filter(v => v.categoryId === filterCategoryId);
  };

  // L·∫•y danh s√°ch t·ª´ theo trang (ph√¢n trang)
  getPagedVocabs = () => {
    const { currentPage, pageSize } = this.state;
    const filtered = this.getFilteredVocabs().filter(v => !v.isLearned);
    const start = (currentPage - 1) * pageSize;
    const end = start + pageSize;
    return filtered.slice(start, end);
  };

  // ========================== H√ÄM RENDER GIAO DI·ªÜN ==========================
  render() {
    const { categories, currentIndex, flipped, loading, error, currentPage, pageSize } = this.state;

    // L·∫•y danh s√°ch t·ª´ ƒë√£ l·ªçc
    const filteredVocabs = this.getFilteredVocabs();
    const unlearnedVocabs = filteredVocabs.filter(v => !v.isLearned);

    // T·ª´ ƒëang hi·ªÉn th·ªã trong flashcard
    const currentVocab = unlearnedVocabs[currentIndex] || null;

    // D·ªØ li·ªáu hi·ªÉn th·ªã tr√™n b·∫£ng (ph√¢n trang)
    const pagedVocabs = this.getPagedVocabs();

    // T√≠nh ti·∫øn ƒë·ªô h·ªçc (%)
    const totalUnlearned = unlearnedVocabs.length;
    const learnedCount = filteredVocabs.length - totalUnlearned;
    const progressPercent =
      filteredVocabs.length === 0 ? 0 : (learnedCount / filteredVocabs.length) * 100;

    // N·∫øu ƒëang loading
    if (loading) return <div className="container mt-5">Loading...</div>;
    // N·∫øu l·ªói
    if (error) return <div className="container mt-5 text-danger">{error}</div>;

    // ========================== JSX TR·∫¢ V·ªÄ ==========================
    return (
      <div className="d-flex flex-column min-vh-100">
        <div className="container mt-5 flex-grow-1" style={{ paddingBottom: "200px" }}>
          <h3>Flashcard Learning</h3>

          {/* ======== FILTER DANH M·ª§C ======== */}
          <select
            className="form-select mb-3"
            value={this.state.filterCategoryId}
            onChange={this.handleFilterChange}
          >
            <option value="All">All Categories</option>
            {categories.map(cat => (
              <option key={cat.id} value={cat.id}>
                {cat.name}
              </option>
            ))}
          </select>

          {/* ======== FLASHCARD HI·ªÇN TH·ªä T·ª™ HI·ªÜN T·∫†I ======== */}
          <div className="flashcard-container mb-3">
            {currentVocab ? (
              <FlashCard
                word={currentVocab.word}
                meaning={currentVocab.meaning}
                flipped={flipped}
                onFlip={this.handleFlip}
                width="100%"
                height="300px"
              />
            ) : (
              // N·∫øu kh√¥ng c√≥ t·ª´
              <div
                style={{
                  width: "100%",
                  height: "300px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  backgroundColor: "white",
                  borderRadius: "8px",
                  boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
                }}
              >
                <h5>No words available</h5>
              </div>
            )}
          </div>

          {/* ======== C√ÅC N√öT ƒêI·ªÄU KHI·ªÇN ======== */}
          <div className="mb-3 d-flex justify-content-center gap-3 flex-wrap">
            <button
              className="btn btn-primary btn-lg"
              onClick={this.handlePrevious}
              disabled={currentIndex === 0}
            >
              Previous
            </button>
            <button
              className="btn btn-success btn-lg"
              onClick={this.handleMarkLearned}
              disabled={!currentVocab}
            >
              Mark as Learned
            </button>
            <button
              className="btn btn-primary btn-lg"
              onClick={this.handleNext}
              disabled={currentIndex >= totalUnlearned - 1}
            >
              Next
            </button>
          </div>

          {/* ======== THANH TI·∫æN TR√åNH ======== */}
          <div className="mb-3">
            <label>Progress</label>
            <div className="progress">
              <div
                className="progress-bar"
                role="progressbar"
                style={{ width: `${progressPercent}%` }}
              />
            </div>
            <small>
              {learnedCount}/{filteredVocabs.length}
            </small>
          </div>

          {/* ======== DANH S√ÅCH T·ª™ V·ª∞NG (B·∫¢NG) ======== */}
          <h5>Word List (Unlearned)</h5>
          <table className="table table-bordered">
            <thead>
              <tr>
                <th>Word</th>
                <th>Meaning</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              {pagedVocabs.map(v => (
                <tr key={v.id}>
                  <td>{v.word}</td>
                  <td>{v.meaning}</td>
                  <td>{v.isLearned ? "Learned" : "Not Learned"}</td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* ======== PH√ÇN TRANG ======== */}
          <div className="mb-5">
            <PaginationAntd
              currentPage={currentPage}
              totalItems={unlearnedVocabs.length}
              pageSize={pageSize}
              onPageChange={page => this.setState({ currentPage: page })}
            />
          </div>
        </div>

        {/* ======== CH√ÇN TRANG ======== */}
        <Footer />
      </div>
    );
  }
}

// ========================== EXPORT COMPONENT ==========================
export default FlashCardPage;
